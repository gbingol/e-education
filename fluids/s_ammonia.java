package jspclass.JFluids;

public class DoymusAmonyak extends MHFluidsSaturated{
	public double sg(double Txt){
		double Sgger,Sgk,Sgb,fark,ort;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double Sg1[]={6.1561, 6.1149, 6.0746, 6.0352, 5.9967, 5.9589, 5.922, 5.8858, 5.8504, 5.8156, 5.7815, 5.7481, 5.7153, 5.6831, 5.6515, 5.6205, 5.59, 5.56, 5.5305, 5.5015, 5.473, 5.4449, 5.4173, 5.3901, 5.3633, 5.3369, 5.3108, 5.2852, 5.2599, 5.235, 5.2104, 5.1861, 5.1621, 5.1385, 5.1151, 5.092, 5.0692, 5.0467, 5.0244, 5.0023, 4.9805, 4.9589, 4.9374, 4.9161, 4.895, 4.874, 4.853, 4.8322, 4.8113, 4.7905, 4.7696};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Sgk = Sg1[k - 1]; Sgb = Sg1[k];
		fark = Txt - t[k - 1];
		ort = (Sgb - Sgk) / (t[k] - t[k - 1]);
		Sgger = Sgk + fark * ort;
		return Sgger;
	}
	//
	public double sf(double Txt){
		double Sfger,Sfk,Sfb,fark,ort;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double Sf1[]={-0.1942, -0.1547, -0.1156, -0.0768, -0.0382, 0, 0.038, 0.0757, 0.1132, 0.1504, 0.1873, 0.224, 0.2605, 0.2967, 0.3327, 0.3684, 0.404, 0.4393, 0.4744, 0.5093, 0.544, 0.5785, 0.6128, 0.6469, 0.6808, 0.7145, 0.7481, 0.7815, 0.8148, 0.8479, 0.8808, 0.9136, 0.9463, 0.9788, 1.0112, 1.0434, 1.0755, 1.1075, 1.1394, 1.1711, 1.2028, 1.2343, 1.2656, 1.2969, 1.3281, 1.3591, 1.3901, 1.4209, 1.4518, 1.4826, 1.5135};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Sfk = Sf1[k - 1]; Sfb = Sf1[k];
		fark = Txt - t[k - 1];
		ort = (Sfb - Sfk) / (t[k] - t[k - 1]);
		Sfger = Sfk + fark * ort;
		return Sfger;
	}
	//
	public double P(double Txt){
		//P kPa
		double fark,ort,Pk,Pb,Pger;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double P1[]={40.88, 45.96, 51.55, 57.69, 64.42, 71.77, 79.8, 88.54, 98.05, 108.37, 119.55, 131.64, 144.7, 158.78, 173.93, 190.22, 207.71, 226.45, 246.51, 267.95, 290.85, 315.25, 341.25, 368.9, 398.27, 429.44, 462.49, 497.49, 534.51, 573.64, 614.95, 658.52, 704.44, 752.79, 803.66, 857.12, 913.27, 972.19, 1033.97, 1098.71, 1166.49, 1237.41, 1311.55, 1389.03, 1469.92, 1554.33, 1642.35, 1734.09, 1829.65, 1929.13, 2032.62};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Pk = P1[k - 1]; Pb = P1[k];
		fark = Txt - t[k - 1];
		ort = (Pb - Pk) / (t[k] - t[k - 1]);
		Pger = Pk + fark * ort;
		return Pger;
	}
	//
	public double hf(double Txt){
		//Hf kJ/kg
		double fark,ort,Hfk,Hfb,Hfger;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double Hf1[]={-44.3, -35.5, -26.6, -17.8, -8.9, 0, 8.9, 17.8, 26.8, 35.7, 44.7, 53.6, 62.6, 71.6, 80.7, 89.7, 98.8, 107.8, 116.9, 126, 135.2, 144.3, 153.5, 162.7, 171.9, 181.1, 190.4, 199.6, 208.9, 218.3, 227.6, 237, 246.4, 255.9, 265.4, 274.9, 284.4, 294, 303.6, 313.2, 322.9, 332.6, 342.3, 352.1, 361.9, 371.7, 381.6, 391.5, 401.5, 411.5, 421.7};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Hfk = Hf1[k - 1]; Hfb = Hf1[k];
		fark = Txt - t[k - 1];
		ort = (Hfb - Hfk) / (t[k] - t[k - 1]);
		Hfger = Hfk + fark * ort;
		return Hfger;
	}
	//
	public double hg(double Txt){
		double fark,ort,Hgk,Hgb,Hgger;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double Hg1[]={1372.4, 1375.8, 1379.2, 1382.5, 1385.8, 1389, 1392.2, 1395.4, 1398.5, 1401.6, 1404.6, 1407.6, 1410.5, 1413.4, 1416.2, 1419, 1421.7, 1424.4, 1427, 1429.5, 1432, 1434.4, 1436.8, 1439.1, 1441.3, 1443.5, 1445.6, 1447.6, 1449.6, 1451.5, 1453.3, 1455.1, 1456.8, 1458.5, 1460, 1461.5, 1462.9, 1464.3, 1465.6, 1466.8, 1467.9, 1469, 1469.9, 1470.8, 1471.5, 1472.2, 1472.8, 1473.2, 1473.5, 1473.7, 1473.7};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Hgk = Hg1[k - 1]; Hgb = Hg1[k];
		fark = Txt - t[k - 1];
		ort = (Hgb - Hgk) / (t[k] - t[k - 1]);
		Hgger = Hgk + fark * ort;
		return Hgger;
	}
	//
	public double vf(double Txt){
		//vf m3/kg
		double fark,ort,Vfk,Vfb,Vfger;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double Vf1[]={0.001424, 0.001429, 0.001434, 0.001439, 0.001444, 0.001449, 0.001454, 0.00146, 0.001465, 0.00147, 0.001476, 0.001481, 0.001487, 0.001492, 0.001498, 0.001504, 0.00151, 0.001515, 0.001521, 0.001528, 0.001534, 0.00154, 0.001546, 0.001553, 0.001559, 0.001566, 0.001573, 0.00158, 0.001587, 0.001594, 0.001601, 0.001608, 0.001616, 0.001623, 0.001631, 0.001639, 0.001647, 0.001655, 0.001663, 0.001671, 0.00168, 0.001689, 0.001698, 0.001707, 0.001716, 0.001726, 0.001735, 0.001745, 0.001756, 0.001766, 0.001777};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Vfk = Vf1[k - 1]; Vfb = Vf1[k];
		fark = Txt - t[k - 1];
		ort = (Vfb - Vfk) / (t[k] - t[k - 1]);
		Vfger = Vfk + fark * ort;
		return Vfger;
	}
	//
	public double vg(double Txt){
		//vg m3/kg
		double fark,ort,Vgk,Vgb,Vgger;
		int k;
		double t[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double Vg1[]={2.6254, 2.3533, 2.114, 1.9032, 1.717, 1.5521, 1.4058, 1.2757, 1.1597, 1.0562, 0.9635, 0.8805, 0.8059, 0.7388, 0.6783, 0.6237, 0.5743, 0.5296, 0.4889, 0.452, 0.4185, 0.3878, 0.3599, 0.3343, 0.3109, 0.2898, 0.2698, 0.2517, 0.2351, 0.2198, 0.2056, 0.1926, 0.1805, 0.1693, 0.159, 0.1494, 0.1405, 0.1322, 0.1245, 0.1173, 0.1106, 0.1044, 0.0986, 0.0931, 0.088, 0.0833, 0.0788, 0.0746, 0.0707, 0.0669, 0.0635};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Vgk = Vg1[k - 1]; Vgb = Vg1[k];
		fark = Txt - t[k - 1];
		ort = (Vgb - Vgk) / (t[k] - t[k - 1]);
		Vgger = Vgk + fark * ort;
		return Vgger;
	}
	//
	public double T(double Pxp){
		double fark,ort,Tk,Tb,Tger;
		int k;
		double T1[]={-50, -48, -46, -44, -42, -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
		double P1[]={40.88, 45.96, 51.55, 57.69, 64.42, 71.77, 79.8, 88.54, 98.05, 108.37, 119.55, 131.64, 144.7, 158.78, 173.93, 190.22, 207.71, 226.45, 246.51, 267.95, 290.85, 315.25, 341.25, 368.9, 398.27, 429.44, 462.49, 497.49, 534.51, 573.64, 614.95, 658.52, 704.44, 752.79, 803.66, 857.12, 913.27, 972.19, 1033.97, 1098.71, 1166.49, 1237.41, 1311.55, 1389.03, 1469.92, 1554.33, 1642.35, 1734.09, 1829.65, 1929.13, 2032.62};
		k = 0;
		do{
			k=k+1;
		}while(!(Pxp <= P1[k]));
		Tk = T1[k - 1]; Tb = T1[k];
		fark = Pxp - P1[k - 1];
		ort = (Tb - Tk) / (P1[k] - P1[k - 1]);
		Tger = Tk + fark * ort;
		return Tger;
	}
}