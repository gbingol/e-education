import java.awt.*;
public class SuOzellikleri{
	public double T(double Pxp){
		double Tger,Tb,Tk,ort,fark;
		int k;
		double T1[]={0.01, 6.98, 13.03, 17.5, 21.08, 24.08, 28.96, 32.88, 40.29, 45.81, 53.97, 60.06, 64.97, 69.1, 75.87, 81.33, 91.78, 99.63, 105.99, 111.37, 116.06, 120.23, 124, 127.44, 130.6, 133.55, 136.3, 138.88, 141.32, 143.63, 147.93, 151.86, 155.48, 158.85, 162.01, 164.97, 167.78, 170.43, 172.96, 175.38, 177.69, 179.91, 184.09, 187.99, 191.64, 195.07, 198.32, 205.76, 212.42, 218.45, 223.99, 233.9, 242.6, 250.4, 263.99, 275.64, 285.88, 295.06, 303.4, 311.06, 318.15, 324.75, 330.93, 336.75, 342.24, 347.44, 352.37, 357.06, 361.54, 365.81, 369.89, 373.8, 374.14};
		double P1[] ={0.6113, 1, 1.5, 2, 2.5, 3, 4, 5, 7.5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400, 1500, 1750, 2000, 2250, 2500, 3000, 3500, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 22090};
		k = 0;
		do{
			k = k + 1;
		}while(!(Pxp <= P1[k]));
		Tk = T1[k - 1]; Tb = T1[k];
		fark = Pxp - P1[k - 1];
		ort = (Tb - Tk) / (P1[k] - P1[k - 1]);
		Tger = Tk + fark * ort;
		return Tger;
	}
	//
	//
	public double Pr(double Txt){
		double fark,ort,Prk,Prb,Prger;
		int i;
		double t[] ={0.01, 4.44, 10, 15.16, 21.11, 26.67, 32.22, 37.78, 43.33, 48.89, 54.44, 60, 65.55, 71.11, 76.67, 82.22, 87.78, 93.33, 104.4, 115.6, 126.7, 137.8, 148.9, 176.7, 204.4, 232.2, 260, 287.7, 315.6};
		double Pr1[] = {13.25, 11.35, 9.4, 7.88, 6.78, 5.85, 5.12, 4.53, 4.04, 3.64, 3.3, 3.01, 2.73, 2.53, 2.33, 2.16, 2.03, 1.9, 1.66, 1.51, 1.36, 1.24, 1.17, 1.02, 1, 0.85, 0.83};
		if((Txt < 0)||(Txt > 260)) return 0;
		i = 0;
		do{
			i = i + 1;
		}while(!(Txt <= t[i]));
		Prk = Pr1[i - 1]; Prb = Pr1[i];
		fark = Txt - t[i - 1];
		ort = (Prb - Prk) / (t[i] - t[i - 1]);
		Prger = Prk + fark * ort;
		return Prger;
	}
	//
	//
	public double k(double Txt){
		double fark,ort,kK,kB,kGer;
		int i;
		double t[] ={0.01, 4.44, 10, 15.16, 21.11, 26.67, 32.22, 37.78, 43.33, 48.89, 54.44, 60, 65.55, 71.11, 76.67, 82.22, 87.78, 93.33, 104.4, 115.6, 126.7, 137.8, 148.9, 176.7, 204.4, 232.2, 260, 287.7, 315.6};
		double K1[] ={0.566, 0.575, 0.585, 0.595, 0.604, 0.614, 0.623, 0.63, 0.637, 0.644, 0.649, 0.654, 0.659, 0.665, 0.668, 0.673, 0.675, 0.678, 0.684, 0.685, 0.685, 0.685, 0.684, 0.677, 0.665, 0.646, 0.616};
		if((Txt < 0)||(Txt > 260)) return 0;
		i = 0;
		do{
			i = i + 1;
		}while(!(Txt <= t[i]));
		kK = K1[i - 1]; kB = K1[i];
		fark = Txt - t[i - 1];
		ort = (kB - kK) / (t[i] - t[i - 1]);
		kGer = kK + fark * ort;
		return kGer;
	}
	//
	//
	public double Cp(double Txt){
		double fark,ort,Cpk,Cpb,Cpger;
		int k;
		double t[]={0.01, 4.44, 10, 15.16, 21.11, 26.67, 32.22, 37.78, 43.33, 48.89, 54.44, 60, 65.55, 71.11, 76.67, 82.22, 87.78, 93.33, 104.4, 115.6, 126.7, 137.8, 148.9, 176.7, 204.4, 232.2, 260, 287.7, 315.6};
		double Cp1[] ={4.225, 4.208, 4.195, 4.186, 4.179, 4.179, 4.174, 4.174, 4.174, 4.174, 4.179, 4.179, 4.183, 4.186, 4.191, 4.195, 4.199, 4.204, 4.216, 4.229, 4.25, 4.271, 4.296, 4.371, 4.467, 4.585, 4.731, 5.024, 5.703};
		if((Txt < 0)||(Txt > 315.6)) return 0;
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Cpk = Cp1[k - 1]; Cpb = Cp1[k];
		fark = Txt - t[k - 1];
		ort = (Cpb - Cpk) / (t[k] - t[k - 1]);
		Cpger = Cpk + fark * ort;
		return Cpger;
	}
	//
	//
	public double Ro(double Txt){
		double Roger,fark,ort,Rob,Rok;
		int k;
		double t[] ={0.01, 4.44, 10, 15.16, 21.11, 26.67, 32.22, 37.78, 43.33, 48.89, 54.44, 60, 65.55, 71.11, 76.67, 82.22, 87.78, 93.33, 104.4, 115.6, 126.7, 137.8, 148.9, 176.7, 204.4, 232.2, 260, 287.7, 315.6};
		double Ro1[] ={999.8, 999.8, 999.2, 998.6, 997.4, 995.8, 994.9, 993, 990.6, 988.8, 985.7, 983.3, 980.3, 977.3, 973.7, 970.2, 966.7, 963.2, 955.1, 946.7, 937.2, 928.1, 918, 890.4, 859.4, 825.7, 785.2, 735.5, 678.7};
		if((Txt < 0)||(Txt > 315.6)) return 0;
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Rok = Ro1[k - 1]; Rob = Ro1[k];
		fark = Txt - t[k - 1];
		ort = (Rob - Rok) / (t[k] - t[k - 1]);
		Roger = Rok + fark * ort;
		return Roger;
	}
	//
	//
	public double Sg(double Txt){
		double Sgger,Sgk,Sgb,fark,ort;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Sg1[] ={9.1562, 9.0257, 8.9008, 8.7814, 8.6672, 8.558, 8.4533, 8.3531, 8.257, 8.1648, 8.0763, 7.9913, 7.9096, 7.831, 7.7553, 7.6828, 7.6122, 7.5545, 7.4791, 7.4159, 7.3549, 7.2958, 7.2387, 7.1833, 7.1296, 7.0775, 7.0269, 6.9777, 6.9299, 6.8833, 6.8379, 6.7935, 6.7502, 6.7078, 6.6663, 6.6256, 6.5857, 6.5465, 6.5079, 6.4698, 6.4323, 6.3952, 6.3585, 6.3221, 6.2861, 6.2503, 6.2146, 6.1791, 6.1437, 6.1083, 6.073, 6.0375, 6.0019, 5.9662, 5.9301, 5.8938, 5.8571, 5.8199, 5.7821, 5.7437, 5.7045, 5.6643, 5.623, 5.5804, 5.5362, 5.4417, 5.3357, 5.2112, 5.0526, 4.7971, 4.4298};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Sgk = Sg1[k - 1]; Sgb = Sg1[k];
		fark = Txt - t[k - 1];
		ort = (Sgb - Sgk) / (t[k] - t[k - 1]);
		Sgger = Sgk + fark * ort;
		return Sgger;
	}
	//
	//
	public double Sf(double Txt){
		double Sfger,Sfk,Sfb,fark,ort;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Sf1[] ={0, 0.0761, 0.151, 0.2245, 0.2966, 0.3674, 0.4369, 0.5053, 0.5725, 0.6387, 0.7038, 0.7679, 0.8312, 0.8935, 0.9549, 1.10155, 1.0753, 1.1343, 1.1925, 1.25, 1.3069, 1.363, 1.4185, 1.4734, 1.5276, 1.5813, 1.6344, 1.687, 1.7391, 1.7907, 1.8418, 1.8925, 1.9427, 1.9925, 2.0419, 2.0909, 2.1396, 2.1879, 2.2359, 2.2835, 2.3309, 2.378, 2.4248, 2.4714, 2.5178, 2.5639, 2.6099, 2.6558, 2.7015, 2.7472, 2.7927, 2.8383, 2.8838, 2.9294, 2.9751, 3.0208, 3.0668, 3.113, 3.1594, 3.2062, 3.2534, 3.301, 3.3493, 3.3982, 3.448, 3.5507, 3.6594, 3.7777, 3.9147, 4.1106, 4.4298};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Sfk = Sf1[k - 1]; Sfb = Sf1[k];
		fark = Txt - t[k - 1];
		ort = (Sfb - Sfk) / (t[k] - t[k - 1]);
		Sfger = Sfk + fark * ort;
		return Sfger;
	}
	//
	//
	public double Ug(double Txt){
		double Ugger,Ugk,Ugb,fark,ort;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Ug1[]={375.3, 2382.3, 2389.2, 2396.1, 2402.9, 2409.8, 2416.6, 2423.4, 2430.1, 2436.8, 2443.5, 2450.1, 2456.6, 2463.1, 2469.6, 2475.9, 2482.2, 2488.4, 2494.5, 2500.6, 2506.5, 2512.4, 2518.1, 2523.7, 2529.3, 2534.6, 2539.9, 2545, 2550, 2554.9, 2559.5, 2564.1, 2568.4, 2572.5, 2576.5, 2580.2, 2583.7, 2587, 2590, 2592.8, 2595.3, 2597.5, 2599.5, 2601.1, 2602.4, 2603.3, 2603.9, 2604.1, 2604, 2603.4, 2602.4, 2600.9, 2599, 2596.6, 2593.7, 2590.2, 2586.1, 2581.4, 2576, 2569.9, 2563, 2555.2, 2546.4, 2536.6, 2525.5, 2498.9, 2464.6, 2418.4, 2351.5, 2228.5, 2029.6};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Ugk = Ug1[k - 1]; Ugb = Ug1[k];
		fark = Txt - t[k - 1];
		ort = (Ugb - Ugk) / (t[k] - t[k - 1]);
		Ugger = Ugk + fark * ort;
		return Ugger;
	}
	//
	//
	public double Uf(double Txt){
		double Ufk,Ufb,Ufger,ort,fark; 
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Uf1[] ={0, 20.97, 42, 62.99, 83.95, 104.88, 125.78, 146.67, 167.56, 188.44, 209.32, 230.21, 251.11, 272.02, 292.95, 313.9, 334.86, 355.84, 376.85, 397.88, 418.94, 440.02, 461.14, 482.3, 503.5, 524.74, 546.02, 567.35, 588.74, 610.18, 631.68, 653.24, 674.87, 696.56, 718.33, 740.17, 762.09, 784.1, 806.19, 828.37, 850.65, 873.04, 895.53, 918.14, 940.87, 963.73, 986.74, 1009.89, 1033.21, 1056.71, 1080.39, 1104.28, 1128.39, 1152.74, 1177.36, 1202.25, 1227.46, 1253, 1278.92, 1305.2, 1332, 1359.3, 1387.1, 1415.5, 1444.6, 1505.3, 1570.3, 1641.9, 1725.2, 1844, 2029.6};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Ufk = Uf1[k - 1]; Ufb = Uf1[k];
		fark = Txt - t[k - 1];
		ort = (Ufb - Ufk) / (t[k] - t[k - 1]);
		Ufger = Ufk + fark * ort;
		return Ufger;
	}
	//
	//
	public double P(double Txt){
		double Pb,Pk,Pger,ort,fark;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double P1[]={0.6113, 0.8721, 1.2276, 1.7051, 2.339, 3.169, 4.246, 5.628, 7.384, 9.593, 12.349, 15.758, 19.94, 25.03, 31.19, 38.58, 47.39, 57.83, 70.14, 84.55, 101.35, 120.82, 143.27, 169.06, 198.53, 232.1, 270.1, 313, 361.3, 415.4, 475.8, 543.1, 617.8, 700.5, 791.7, 892, 1002.1, 1112.7, 1254.4, 1397.8, 1553.8, 1723, 1906.2, 2104, 2318, 2548, 2795, 3060, 3344, 3648, 3973, 4319, 4688, 5081, 5499, 5942, 6412, 6909, 7436, 7993, 8581, 9202, 9856, 10547, 11274, 12845, 14586, 16513, 18651, 21030, 22090};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Pk = P1[k - 1]; Pb = P1[k];
		fark = Txt - t[k - 1];
		ort = (Pb - Pk) / (t[k] - t[k - 1]);
		Pger = Pk + fark * ort;
		return Pger;
	}
	//
	//
	public double Hg(double Txt){
		double Hgk,Hgb,Hgger,ort,fark;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Hg1[] ={2501.4, 2510.6, 2519.8, 2528.9, 2538.1, 2547.2, 2556.3, 2565.3, 2574.3, 2583.2, 2592.1, 2600.9, 2609.6, 2618.3, 2626.8, 2635.3, 2643.7, 2651.9, 2660.1, 2668.1, 2676.1, 2683.8, 2691.5, 2699, 2706.3, 2713.5, 2720.5, 2727.3, 2733.9, 2740.3, 2746.5, 2752.4, 2758.1, 2763.5, 2768.7, 2273.6, 2278.2, 2782.4, 2786.4, 2790, 2793.2, 2796, 2798.5, 2800.5, 2802.1, 2803.3, 2804, 2804.2, 2803.8, 2803, 2801.5, 2799.5, 2796.9, 2793.6, 2789.7, 2785, 2779.6, 2773.3, 2766.2, 2758.1, 2749, 2738.7, 2727.3, 2714.5, 2700.1, 2665.9, 2622.0, 2563.9, 2481.0, 2332.1, 2099.3};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Hgk = Hg1[k - 1]; Hgb = Hg1[k];
		fark = Txt - t[k - 1];
		ort = (Hgb - Hgk) / (t[k] - t[k - 1]);
		Hgger = Hgk + ort * fark;
		return Hgger;
	}
	//
	//
	public double Vg(double Txt){
		double Vgk,Vgb,Vgger,fark,ort;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Vg1[] ={206.14, 147.12, 106.38, 77.93, 57.79, 43.36, 32.89, 25.22, 19.52, 15.26, 12.03, 9.568, 7.671, 6.197, 5.042, 4.131, 3.407, 2.828, 2.361, 1.982, 1.6729, 1.4194, 1.2102, 1.0366, 0.8919, 0.7706, 0.6685, 0.5822, 0.5089, 0.4463, 0.3928, 0.3468, 0.3071, 0.2727, 0.2428, 0.2168, 0.19405, 0.17409, 0.15654, 0.14105, 0.12736, 0.11521, 0.10441, 0.09479, 0.08619, 0.07849, 0.07158, 0.06357, 0.05976, 0.05471, 0.05013, 0.04598, 0.04221, 0.03877, 0.03564, 0.03279, 0.03017, 0.02777, 0.02557, 0.02354, 0.02167, 0.019948, 0.01835, 0.016867, 0.015488, 0.012996, 0.010797, 0.008813, 0.006945, 0.004925, 0.003155};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Vgk = Vg1[k - 1]; Vgb = Vg1[k];
		fark = Txt - t[k - 1];
		ort = (Vgb - Vgk) / (t[k] - t[k - 1]);
		Vgger = Vgk + ort * fark;
		return Vgger;
	}
	//
	//
	public double Vf(double Txt){
		double Vfk,Vfb,Vfger,fark,ort;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Vf1[]={0.001, 0.001, 0.001, 0.001001, 0.001002, 0.001003, 0.001004, 0.001006, 0.001008, 0.00101, 0.001012, 0.001015, 0.001017, 0.00102, 0.001023, 0.001026, 0.001029, 0.001033, 0.001036, 0.00104, 0.001044, 0.001048, 0.001052, 0.001056, 0.00106, 0.001065, 0.00107, 0.001075, 0.00108, 0.001085, 0.001091, 0.001096, 0.001102, 0.001108, 0.001114, 0.001121, 0.001127, 0.001134, 0.001141, 0.001149, 0.001157, 0.001164, 0.001173, 0.001181, 0.00119, 0.001199, 0.001209, 0.001219, 0.001229, 0.00124, 0.001251, 0.001263, 0.001276, 0.001289, 0.001302, 0.001317, 0.001332, 0.001348, 0.001366, 0.001384, 0.001404, 0.001425, 0.001447, 0.001472, 0.01499, 0.001561, 0.001638, 0.00174, 0.001893, 0.002213, 0.003155};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Vfk = Vf1[k - 1]; Vfb = Vf1[k];
		fark = Txt - t[k - 1];
		ort = (Vfb - Vfk) / (t[k] - t[k - 1]);
		Vfger = Vfk + ort * fark;
		return Vfger;
	}
	//
	//
	public double Hf(double Txt){
		double X,h,fark,ort,Hb,Hk;
		int k;
		double t[] ={0.01, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 330, 340, 350, 360, 370, 374.14};
		double Hf1[] ={0.01, 20.98, 42.01, 62.99, 83.96, 104.89, 125.79, 146.68, 167.57, 188.45, 209.33, 230.23, 251.13, 272.06, 292.98, 313.93, 334.91, 355.9, 376.92, 397.96, 419.04, 440.15, 461.3, 482.48, 503.71, 524.99, 546.31, 567.69, 589.13, 610.63, 632.2, 653.84, 675.55, 697.34, 719.21, 741.17, 763.12, 785.37, 807.62, 829.98, 852.45, 875.04, 897.76, 920.62, 943.62, 966.78, 990.12, 1013.62, 1037.32, 1061.23, 1085.36, 1109.73, 1134.37, 1159.28, 1184.51, 1210.07, 1235.99, 1262.31, 1289.07, 1316.3, 1344, 1372.4, 1401.3, 1431.0, 1461.5, 1525.3, 1594.2, 1670.6, 1760.5, 1890.5, 2099.3};
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		X = t[k];
		Hk = Hf1[k - 1]; Hb = Hf1[k];
		fark = Txt - t[k - 1];
		ort = (Hb - Hk) / (t[k] - t[k - 1]);
		h = Hk + ort * fark;
		return h;
	}
	//
	//
	public double Viskozite(double Txt){
		double Visger,fark,ort,Visb,Visk;
		int k;
		double t[] ={0.01, 4.44, 10, 15.16, 21.11, 26.67, 32.22, 37.78, 43.33, 48.89, 54.44, 60, 65.55, 71.11, 76.67, 82.22, 87.78, 93.33, 104.4, 115.6, 126.7, 137.8, 148.9, 176.7, 204.4, 232.2, 260, 287.7, 315.6};
		double Vis1[]={0.00179, 0.00155, 0.00131, 0.00112, 0.00098, 0.00086, 0.000765, 0.000682, 0.000616, 0.000562, 0.000513, 0.000471, 0.00043, 0.000401, 0.000372, 0.000347, 0.000327, 0.000306, 0.000267, 0.000244, 0.000219, 0.000198, 0.000186, 0.000157, 0.000136, 0.00012, 0.000107, 0.0000951, 0.0000868};
		if((Txt < 0)||(Txt > 315.6)) return 0;
		k = 0;
		do{
			k = k + 1;
		}while(!(Txt <= t[k]));
		Visk = Vis1[k - 1]; Visb = Vis1[k];
		fark = Txt - t[k - 1];
		ort = (Visb - Visk) / (t[k] - t[k - 1]);
		Visger = Visk + fark * ort;
		return Visger;
	}
	//
	//
	public double VfP(double Pxp){
		double Vfger,Vfb,Vfk,ort,fark;
		int k;
		double P1[] ={0.6113, 1, 1.5, 2, 2.5, 3, 4, 5, 7.5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400, 1500, 1750, 2000, 2250, 2500, 3000, 3500, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 22090};
		double Vf1[] ={0.001, 0.001, 0.001001, 0.001001, 0.001002, 0.001003, 0.001004, 0.001005, 0.001008, 0.00101, 0.001014, 0.001017, 0.00102, 0.001022, 0.001027, 0.00103, 0.001037, 0.001043, 0.001048, 0.001053, 0.001057, 0.001061, 0.001064, 0.001067, 0.00107, 0.001073, 0.001076, 0.001079, 0.001081, 0.001084, 0.001088, 0.001093, 0.001097, 0.001101, 0.001104, 0.001108, 0.001112, 0.001115, 0.001118, 0.001121, 0.001124, 0.001127, 0.001133, 0.001139, 0.001144, 0.001149, 0.001154, 0.001166, 0.001177, 0.001187, 0.001197, 0.001217, 0.001235, 0.001252, 0.001286, 0.001319, 0.001351, 0.001384, 0.001418, 0.001452, 0.001489, 0.001527, 0.001567, 0.001611, 0.001658, 0.001711, 0.00177, 0.00184, 0.001924, 0.002036, 0.002207, 0.002742, 0.003155};
		k = 0;
		do{
			k = k + 1;
		}while(!(Pxp <= P1[k]));
		Vfk = Vf1[k - 1];Vfb = Vf1[k];
		fark = Pxp - P1[k - 1];
		ort = (Vfb - Vfk) / (P1[k] - P1[k - 1]);
		Vfger = Vfk + fark * ort;
		return Vfger;
	}
	//
	//
	public double VgP(double Pxp){
		double Vgger,Vgb,Vgk,ort,fark;
		int k;
		double P1[]={0.6113, 1, 1.5, 2, 2.5, 3, 4, 5, 7.5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400, 1500, 1750, 2000, 2250, 2500, 3000, 3500, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 22090};
		double Vg1[]={206.14, 129.21, 87.98, 67, 54.25, 45.67, 34.8, 28.19, 19.24, 14.67, 10.02, 7.649, 6.204, 5.229, 3.993, 3.24, 2.217, 1.694, 1.3749, 1.1593, 1.0036, 0.8857, 0.7933, 0.7187, 0.6573, 0.6058, 0.562, 0.5243, 0.4914, 0.4625, 0.414, 0.3749, 0.3427, 0.3157, 0.2927, 0.2729, 0.2556, 0.2404, 0.227, 0.215, 0.2042, 0.19444, 0.17753, 0.16333, 0.15125, 0.14084, 0.13177, 0.11349, 0.09963, 0.08875, 0.07998, 0.06668, 0.05707, 0.04978, 0.03944, 0.03244, 0.02737, 0.02352, 0.02048, 0.018026, 0.015987, 0.014263, 0.01278, 0.011485, 0.010337, 0.009306, 0.008364, 0.007489, 0.006657, 0.005834, 0.004952, 0.003568, 0.003155};
		k = 0;
		do{
			k = k + 1;
		}while(!(Pxp <= P1[k]));
		Vgk = Vg1[k - 1]; Vgb = Vg1[k];
		fark = Pxp - P1[k - 1];
		ort = (Vgb - Vgk) / (P1[k] - P1[k - 1]);
		Vgger = Vgk + fark * ort;
		return Vgger;
	}
	public double HfP(double Pxp){
		double Hfger,Hfk,Hfb,ort,fark;
		int k;
		double P1[] ={0.6113, 1, 1.5, 2, 2.5, 3, 4, 5, 7.5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400, 1500, 1750, 2000, 2250, 2500, 3000, 3500, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 22090};
		double Hf1[]={0.01, 29.3, 54.71, 73.48, 88.49, 101.05, 121.46, 137.82, 168.79, 191.83, 225.94, 251.4, 271.93, 289.23, 317.58, 340.49, 384.39, 417.46, 444.32, 467.11, 486.99, 504.7, 520.72, 535.37, 548.89, 561.47, 573.25, 584.33, 594.81, 604.74, 623.25, 640.23, 655.93, 670.56, 684.28, 697.22, 709.47, 721.11, 732.22, 742.83, 753.02, 762.81, 781.34, 798.65, 814.93, 830.3, 844.89, 878.5, 908.79, 936.49, 962.11, 1008.42, 1049.75, 1087.31, 1154.23, 1213.35, 1267, 1316.64, 1363.26, 1407.56, 1450.1, 1491.3, 1531.5, 1571.1, 1610.5, 1650.1, 1690.3, 1732, 1776.5, 1826.3, 1888.4, 2022.2, 2099.3};
		k = 0;
		do{
			k = k + 1;
		}while(!(Pxp <= P1[k]));
		Hfk = Hf1[k - 1] ;Hfb = Hf1[k];
		fark = Pxp - P1[k - 1];
		ort = (Hfb - Hfk) / (P1[k] - P1[k - 1]);
		Hfger = Hfk + fark * ort;
		return Hfger;
	}
	//
	//
	public double HgP(double Pxp){
		double Hgger,Hgk,Hgb,ort,fark;
		int k;
		double P1[]={0.6113, 1, 1.5, 2, 2.5, 3, 4, 5, 7.5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400, 1500, 1750, 2000, 2250, 2500, 3000, 3500, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 22090};
		double Hg1[]={2501.4, 2514.2, 2525.3, 2533.5, 2540, 2545.5, 2554.4, 2561.5, 2574.8, 2584.7, 2599.1, 2609.7, 2618.2, 2625.3, 2636.8, 2645.9, 2663, 2675.5, 2685.4, 2693.6, 2700.6, 2706.7, 2712.1, 2716.9, 2721.3, 2725.3, 2729, 2732.4, 2735.6, 2738.6, 2743.9, 2748.7, 2753, 2756.8, 2760.3, 2763.5, 2766.4, 2769.1, 2771.6, 2773.9, 2776.1, 2778.1, 2781.7, 2784.8, 2787.6, 2790, 2792.2, 2796.4, 2799.5, 2801.7, 2803.1, 2804.2, 2803.4, 2801.4, 2794.3, 2784.3, 2772.1, 2758, 2742.1, 2724.7, 2705.6, 2684.9, 2662.2, 2637.6, 2610.5, 2580.6, 2547.2, 2509.1, 2464.5, 2409.7, 2334.6, 2165.6, 2099.3};
		k = 0;
		do{
			k = k + 1;
		}while(!(Pxp <= P1[k]));
		Hgk = Hg1[k - 1]; Hgb = Hg1[k];
		fark = Pxp - P1[k - 1];
		ort = (Hgb - Hgk) / (P1[k] - P1[k - 1]);
		Hgger = Hgk + fark * ort;
		return Hgger;
	}
}
